import { describe, it, expect } from 'vitest';
import { countWords, generatePassword } from './tools';

describe('countWords', () => {
    it('should return 0 for an empty string', () => {
        expect(countWords('')).toBe(0);
    });

    it('should return the correct word count for a sentence', () => {
        expect(countWords('Hello world')).toBe(2);
        expect(countWords('This is a test sentence')).toBe(5);
    });

    it('should return undefined for non-string inputs', () => {
        expect(countWords(123 as any)).toBeUndefined();
        expect(countWords(null as any)).toBeUndefined();
        expect(countWords(undefined as any)).toBeUndefined();
    });
});

describe('generatePassword', () => {
    it('should generate a password of the specified length', () => {
        const length = 8;
        const password = generatePassword(length);
        expect(password).toHaveLength(length);
    });

    it('should include uppercase letters, lowercase letters, and numbers', () => {
        const password = generatePassword(12);
        expect(/[A-Z]/.test(password)).toBe(true);
        expect(/[a-z]/.test(password)).toBe(true);
        expect(/[0-9]/.test(password)).toBe(true);
    });

    it('should shuffle the characters in the password', () => {
        const password = generatePassword(10);
        const sortedPassword = password.split('').sort().join('');
        expect(password).not.toBe(sortedPassword); // Ensure the password is shuffled
    });

    it('should handle lengths less than or equal to 6 correctly', () => {
        const password = generatePassword(6);
        expect(password).toHaveLength(6);
    });

    it('should handle lengths greater than 6 correctly', () => {
        const password = generatePassword(10);
        expect(password).toHaveLength(10);
    });
});
